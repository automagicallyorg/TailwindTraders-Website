name: Multiple Environment Workflow

on:
  push:
    branches: 
      - main 
    # paths:
    #   - TailwindTraders.Website/Source/**   

env:

  # The location to store the meta data for the deployment.
  LOCATION: "westeurope"

  # Declaring the version of .NET to be used
  DOTNET_VERSION: 5.x

  # Declaring the version of Node to be used
  NODE_VERSION: 10.x

  # Build and Test Code 
  # TODO: Make more concise
jobs:
  buildTest:
    name: Build and Test Code
    runs-on: ubuntu-latest
    steps:

    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
   
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: Install dependencies in app
      run: dotnet restore ./TailwindTraders.Website/Source/*.sln

    - name: Build dotnet
      run: dotnet build ./TailwindTraders.Website/Source/*.sln --configuration Release --no-restore
   
    - name: Test dotnet
      run: dotnet test ./TailwindTraders.Website/Source/*.sln --no-restore --verbosity normal
    
    - name: Publish with dotnet
      run: dotnet publish ./TailwindTraders.Website/Source/Tailwind.Traders.Web/Tailwind.Traders.Web.csproj -c Release -o './production' 
    

  buildImage:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: buildTest

    steps:

    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2

    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    # Authenticate into Docker
    - name: "docker login"
      uses: azure/docker-login@v1
      with:
        login-server: ${{ secrets.DOCKER_LOGIN_SERVER }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    # Build and push Docker image  
    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: ${{ secrets.DOCKER_LOGIN_SERVER }}/tailwindtraders-ado40:${{ github.sha }}
        context: ./TailwindTraders.Website/Source/Tailwind.Traders.Web/

    # Enabling CI/CD Scanning
    - uses: Azure/container-scan@v0 
      name: Scan image for vulnerabilities
      id: container-scan
      continue-on-error: true
      with:
        image-name: ${{ secrets.DOCKER_LOGIN_SERVER }}/tailwindtraders-ado40:${{ github.sha }} 

    # Post Logs to AppInsights
    - name: Post logs to appinsights
      uses: Azure/publish-security-assessments@v0
      with: 
        scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
        connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
        subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }} 
   
  deploy_test:
        
    runs-on: ubuntu-latest
    name: Deploy to Test
    needs: buildImage

    # declare GitHub Environment - test
    environment:
      name: test
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # deploy infrastructure with Azure Bicep
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.RG_NAME }} `
          --location ${{ secrets.LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.LOCATION }} `
          --parameters rgName=${{ secrets.RG_NAME }} `
          --parameters webAppName=${{ secrets.WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=tailwindtraders-ado40:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./TailwindTraders.Website/Deploy/IaC

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.RG_NAME }} `
          --name ${{ secrets.WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/tailwindtraders-ado40:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./TailwindTraders.Website/Deploy/IaC

    # Get the URL for the Azure WebApp
    - name: Get the Webapp URL
      id: get-webapp-url
      shell: pwsh
      run: |
        $appurl = $(az webapp config hostname list `
          --resource-group ${{ secrets.RG_NAME }} `
          --webapp-name ${{ secrets.WEBAPP_NAME }} `
          --output json) | ConvertFrom-Json
        Write-Output "The webapp URL is https://$($appurl.name)"
        Write-Output "::set-output name=webAppUrl::https://$($appurl.name)"
      working-directory: ./TailwindTraders.Website/Deploy/IaC


  deploy_staging:
        
    runs-on: ubuntu-latest
    name: Deploy to Staging
    needs: deploy_test

    # declare GitHub Environment - Staging
    environment:
      name: Staging
      url:  https://production-tailwindtraders-ado40-staging.azurewebsites.net
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.RG_NAME }} `
          --name ${{ secrets.WEBAPP_NAME}} `
          --slot staging `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/tailwindtraders-ado40:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./TailwindTraders.Website/Deploy/IaC

    
  deploy_production:
        
    runs-on: ubuntu-latest
    name: Deploy to Production
    needs: deploy_staging

    # declare GitHub Environment - Production
    environment:
      name: Production
      url:  ${{ steps.get-webapp-url.outputs.webAppUrl }}
 
    steps:
    # checkout code
    - name: checkout branch
      uses: actions/checkout@v2
    
    # log into Azure
    - name: "Login via Azure CLI"
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    # deploy infrastructure with Azure Bicep
    - name: Deploy infrastructure
      id: azure-deployment
      shell: pwsh
      run: |
        $deployment = $(az deployment sub create --name ${{ secrets.RG_NAME }} `
          --location ${{ secrets.LOCATION }} `
          --template-file ./main.bicep `
          --parameters location=${{ secrets.LOCATION }} `
          --parameters rgName=${{ secrets.RG_NAME }} `
          --parameters webAppName=${{ secrets.WEBAPP_NAME}} `
          --parameters dockerRegistryHost=${{ secrets.DOCKER_LOGIN_SERVER }} `
          --parameters dockerRegistryServerUsername=${{ secrets.DOCKER_USERNAME }} `
          --parameters dockerRegistryServerPassword=${{ secrets.DOCKER_PASSWORD }} `
          --parameters dockerImage=tailwindtraders-ado40:${{ github.sha }} `
          --output json) | ConvertFrom-Json
      working-directory: ./TailwindTraders.Website/Deploy/IaC

    # Push container image to Azure WebApp
    - name: Setup Container
      id: container-set
      shell: pwsh
      run: |
        $deployment = $(az webapp config container set  --resource-group ${{ secrets.RG_NAME }} `
          --name ${{ secrets.WEBAPP_NAME}} `
          --docker-custom-image-name ${{ secrets.DOCKER_LOGIN_SERVER }}/tailwindtraders-ado40:${{ github.sha }} `
          --docker-registry-server-url https://${{ secrets.DOCKER_LOGIN_SERVER }} `
          --docker-registry-server-user ${{ secrets.DOCKER_USERNAME }} `
          --docker-registry-server-password ${{ secrets.DOCKER_PASSWORD }} `
          --output json) | ConvertFrom-Json
      working-directory: ./TailwindTraders.Website/Deploy/IaC

    # Get the URL for the Azure WebApp
    - name: Get the Webapp URL
      id: get-webapp-url
      shell: pwsh
      run: |
        $appurl = $(az webapp config hostname list `
          --resource-group ${{ secrets.RG_NAME }} `
          --webapp-name ${{ secrets.WEBAPP_NAME }} `
          --output json) | ConvertFrom-Json
        Write-Output "The webapp URL is https://$($appurl.name)"
        Write-Output "::set-output name=webAppUrl::https://$($appurl.name)"
      working-directory: ./TailwindTraders.Website/Deploy/IaC
